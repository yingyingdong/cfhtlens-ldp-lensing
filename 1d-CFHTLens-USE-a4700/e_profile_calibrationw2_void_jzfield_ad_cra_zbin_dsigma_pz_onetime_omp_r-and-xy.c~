#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include "fftw3.h"
#include "omp.h"

#include "func.h"
#include "struct.h"
#include "Romberg.h"
#include "power.h"
#include "clusters.h"
#include "get_z_dal.h"
#include "thread_assign.h"

void get_line(char *file,int *nobj);
LENS *load_data(char *file ,int nobj,int num,double **arr,int *nfit,
        double *zmax,double xmax[2],double ymax[2]);
double **D_malloc2_here(int n,int NDIV[2]);
void good_data(double **arr,int nobj,int nfit,LENS *Lens,double *z,
        double xma[2],double yma[2]);
float arcsin(double x,double y);
void mean_shear(double cen[4],LENS *Lens,int Nfound,int *found,SHEAR **shear,
        double gstep[2],int ntr[2],double zbin[2],double rmin,
        double *DAzlg,double zmin,double zsteplg,int flagd,int flag_lg,int flag_wt,
        double pz,int flag_com);
double et1(double e1,double e2,double sin2a,double cos2a);
double et2(double e1,double e2,double sin2a,double cos2a);
static double step[2];
void check1d(int *arr,int n);
void check_shear(SHEAR **shear,int n1,int n2);
void shear_output(int ntr[2],SHEAR **shear,SHEARR *shearr,char *file,double gstep[2],
        double rmin,int flag_lg,int nuse);
void gain_gstep(double rr,double rmin,double gstep[2],int ntr[2],int flag_lg);
void gain_fileo_name(int flag_lg,int flagd,int flagc,int wt_sigma,
        int flag_com,char *tmp1,char *tmp2,char *tmpwt,int ngrp_use,
        double mag_limit,double zmin,double rcut,int nbin,double zstep);

#define omegal0 0.7
#define omegam0 0.3
#define H0 72.
#define DH 3000000. //(kpc/h)
#define au (pi/180.)  //error
#define GM 0.00000000430071  //(Mpc/M_sun (km/s)^2)
#define cM 300000. //(km/s)
int my_void_here(double (*pos)[5],double rcut,double zstep,double zmin_v,int nzbin_v,
        double mag_limit,double mask_ratio,double zmin,double zsteplg,double *DAzlg);
void free_arr_use(int **found,int *Nfound,int ngroup,double *random);
void zero_shear_here(SHEAR ***shear,SHEARR **shearr,int nzbin,int ntr[2]);
//double angu_dia_d(double z)
//{
//	return 1./sqrt(omegal0+omegam0*(1+z)*(1+z)*(1+z));
//}


int main(int argc,char **argv)
{

	FILE *fp;
	//char file[1024]="../../22/hebing/all.tsv";
	char file[1024]="/home/fydong/data_dir/data/CFHTLens/4-jz-fields-pz.tsv";
	//char file[1024]="/home/fydong/data_dir/data/CFHTLens/CFHTLens_2015-07-15T01:50:34-pz-jz-fields.tsv";
	char tmp1[512],tmp2[512],tmp3[512],wtname[512];
	char buf[1024],name[512],tmpwt[512];
	int i,j,l,nfit,flagc=-1,flagd=1,flag_lg=0,wt_sigma=1,flag_com=1,flag_xy=1;

	
	
	//------load data------//
	int nobj = 0,num=15,nzbinlg=1000;
	double **arr,*zbinlg,*DAzlg,zsteplg;
	double zmax=7.,zmin=1e-3,xmax[2],ymax[2];
	LENS *Lens;

    //printf("%f\n",sigma(0.39,0.65,1e-3,zsteplg,0,DAzlg));
	get_line(file,&nobj);
	//nobj = 22724706;
	arr = D_malloc2(nobj,num);	
	Lens = load_data(file,nobj,num,arr,&nfit,&zmax,xmax,ymax);	
	free_D_malloc2(arr,nobj);
    zbinlg = zbin_lg(nzbinlg,zmin,zmax,&zsteplg);
    DAzlg  = DA_zlg(nzbinlg,zbinlg);
    printf("zmax = %f \n",zmax);



	//------make grid------//
	int NDIV[2]={1024,1024};
	double xrange[2][2];
	double **xgrid;
	xgrid = D_malloc2_here(2,NDIV);
	for(i=0;i<2;i++)
		xrange[1][i] = ymax[i];
	xrange[0][0] = -xmax[1];  
	xrange[0][1] = -xmax[0];
	
	printf("xmax:%f %f ,ymax:%f %f ,zmax:%f\n",xrange[0][0],xrange[0][1],
			xrange[1][0],xrange[1][1],zmax);

	for(i=0;i<2;i++) 
		for(j=0;j<=NDIV[i];j++)
			xgrid[i][j] = xrange[i][0]+j*(xrange[i][1]-xrange[i][0])/NDIV[i];

	
	//------make linklist------//	
	int *hoc,*ll;
	hoc = mymalloc(sizeof(int)*NDIV[0]*NDIV[1]);
	ll  = mymalloc(sizeof(int)*nfit);
	
	for(i=0;i<2;i++) step[i] = (xrange[i][1]-xrange[i][0])/NDIV[i];
	makell_sub(Lens,nfit,hoc,ll,NDIV,xrange,step,xgrid);

	//check_num(Lens,NDIV,xgrid,hoc,ll);
		
	//search grid
	//first search source in zgrid
	int zgrid1 = 0,zgrid2 = zgrid1+1,dz=3;  //zgird = 2
	double zbin_c[2]={0.2,0.58},mag=0,pz=0.2;
	//double zbin_b[5][2]={{0.58,0.72},{0.72,0.86},{0.86,1.02},{1.02,1.3},{1.3,2.5}};
	double zbin_b[1][2]={{0.58,2.5}};
	int nzbin=1,ngroup;
    //double zbin[2]={0.1,0.15};
	double (*group_pos)[5];
    group_pos = mymalloc(sizeof(double)*5*(2000*2000));

	int pid,pindex,Nbound=0;
	double mul,rmax,rtmp,rmin = 50.;
    if(flagd < 1) {rmax=20./60;rmin=0.1/10;}
    else          {rmax=12000; rmin=50;}
    double rr = rmax,gstep[2],rcut[5]={1.,1.5,2.,2.5,3.}; //arcmin
    int ntr[2] = {1,60}; if(flagd < 1) ntr[1] = 20;
    int nthread=30;

    gain_gstep(rr,rmin,gstep,ntr,flag_lg);
    SHEAR ****shear;
    SHEARR ***shearr;
    shear  = shear_thread_assign(nzbin,nthread,ntr);
    shearr = shearr_thread_assign(nzbin,nthread,ntr);
        
    double zstep,zminvoid=0.4,mag_limit=-20.5,mask_ratio=0.1; 
    int kk,nzbinvoid=1,nn,**nuse,zz,ngrp_use=40000;
    nuse = I_calloc2(nzbin,nthread);
    for(zz=0;zz<4;zz++)
    {
        zstep = 0.05*(1+zz);
        for(kk=0;kk<5;kk++)
        {
            ngroup = my_void_here(group_pos,rcut[kk],zstep,zminvoid,nzbinvoid,mag_limit,mask_ratio
                    ,zmin,zsteplg,DAzlg);
            int **found,*Nfound,*ngroup_assign; double *random;
            ngroup_assign = thread_assign(nthread,ngroup);
            found  = mymalloc(sizeof(int *)*ngroup);
            Nfound = mymalloc(sizeof(int)*ngroup);
            memset(Nfound,0,sizeof(int)*ngroup);

            zero_shear_thread(shear,shearr,nzbin,ntr,nthread);
            mul=(ngroup*1./ngrp_use); if(mul<1) mul=1; printf("ngroup=%d,mul=%lg",ngroup,mul);
            random = return_drand48(ngroup);
            omp_set_num_threads(nthread);
            //#pragma omp parallel for schedule(dynamic,1)
#pragma omp parallel for private(i,rtmp)
            for(i=0;i<ngroup;i++) 
            {
                if(random[i]<=1./mul && group_pos[i][2]>=zbin_c[0] && group_pos[i][2]<zbin_c[1])
                {
                    if(i %10000 == 0) printf("i = %d \n",i);
                    if(flagd==0) rtmp = rmax/cos(au*group_pos[i][1]);
                    else rtmp = (rmax/group_pos[i][3])/au/cos(au*group_pos[i][1]);
                    found[i] = linklist_search_sub_pos2(Lens,group_pos[i],rtmp,
                            &Nfound[i],hoc,ll,xrange,step,NDIV,nfit);
                }
                else found[i] = mymalloc(sizeof(int)*Nfound[i]);
            }
            printf("end \n");


            for(j=0;j<nzbin;j++)
            {
#pragma omp parallel for private(l,i)
                for(l=0;l<nthread;l++)
                {
                    nuse[j][l] = 0;
                    //for(i=0;i<ngroup;i++)
                    for(i=ngroup_assign[l];i<ngroup_assign[l+1];i++)
                    {
                        if(Nfound[i] > 0)
                        {
                            mean_shear(group_pos[i],Lens,Nfound[i],found[i],shear[j][l],gstep,ntr,zbin_b[j],rmin,
                                    DAzlg,zmin,zsteplg,flagd,flag_lg,wt_sigma,pz,flag_com);
                            nuse[j][l]++;
                        }
                    }
                    printf("nuse[%d][%d]=%d\n",j,l,nuse[j][l]);
                }
            }

            //for(i=0;i<ngroup;i++) {if(i%10==0)nn=0;else nn=10; found[i] = mymalloc(sizeof(int)*nn);}
            free_arr_use(found,Nfound,ngroup,random);
            gain_fileo_name(flag_lg,flagd,flagc,wt_sigma,flag_com,tmp1,tmp2,tmpwt,ngrp_use,
                    mag_limit,zminvoid,rcut[kk],nzbinvoid,zstep);

            for(i=0;i<nzbin;i++)
            {
                add_shear_thread(nthread,shear[i],ntr);
                add_nuse_thread(nuse[i],nthread);
                //sprintf(file,"data-2017/onetime-sigma-pz/4jzfield-%s-%lg-%lg-%d-%d-shear-cali2-%scra-%lg-%lg-%s-pz%lg-randomposmul1omp.dat",
                sprintf(file,"data-2017/onetime-sigma-pz/4jzfield-%s-%lg-%lg-%d-%d-shear-cali2-%scra-%lg-%lg-%s-pz%lgomp.dat",
                        //sprintf(file,"data-2017/onetime-sigma-pz/w1jzfield-%s-%lg-%lg-%d-%d-shear-cali2-%scra-%lg-%lg-%s-pz%lg.dat",
                    tmp2,zbin_c[0],zbin_c[1],ntr[0],ntr[1],tmp1,zbin_b[i][0],zbin_b[i][1],tmpwt,pz); 
                shear_output(ntr,shear[i][0],shearr[i][0],file,gstep,rmin,flag_lg,nuse[i][0]);	
             }
            free(ngroup_assign);
        }
    }
	return 0;
}


void gain_gstep(double rr,double rmin,double gstep[2],int ntr[2],int flag_lg)
{
    gstep[0] = 2*pi/(ntr[0]);
    if(flag_lg==0) gstep[1] = rr/ntr[1];
    else gstep[1] = (log10(rr)-log10(rmin))/ntr[1];
}

void zero_shear_here(SHEAR ***shear,SHEARR **shearr,int nzbin,int ntr[2])
{
    int i,j;
    for(i=0;i<nzbin;i++)
    {
        for(j=0;j<ntr[0];j++)
            memset(shear[i][j],0,sizeof(SHEAR)*ntr[1]);
        memset(shearr[i],0,sizeof(SHEARR)*ntr[1]);
    }
}





void free_arr_use(int **found,int *Nfound,int ngroup,double *random)
{
    int i;
    free(random);
    free_I_malloc2(found,ngroup);
    free(Nfound);
}

double **D_malloc2_here(int n,int NDIV[2])
{
	int i,j;
	double **arr;

	arr = mymalloc(sizeof(double *)*n);
	for(i=0;i<n;i++)
		arr[i] = mymalloc(sizeof(double)*(NDIV[i]+1));
	return arr;
}

void get_line(char *file,int *nobj)
{
	FILE *fp; int n = 0;
	char buf[1024];
	myfopen(fp,file,"r");

	//fscanf(fp,"%*[^\n]%*c");
	while(fgets(buf,1024,fp) != NULL)
	{
		if(buf[strlen(buf) - 1] == '\n')
			n++;
	}
	fclose(fp);
	*nobj = n;
	printf("nobj = %d \n",*nobj);

}


LENS *load_data(char *file ,int nobj,int num,double **arr,int *nfit,double *zmax,
		double xmax[2],double ymax[2])
{
	int i,n,tmp = 0;
	FILE *fp;          
	char chararr[512];
	LENS *Lens;
	myfopen(fp,file,"r");                                                               
	//fscanf(fp,"%*[^\n]%*c");  //skip the first line                                                          
	n = 0;                                                                            
	while(n < nobj)                                                                
	//while(n < 100)                                                                
	{                                                                                                                                            
		for(i=0;i<3;i++) fscanf(fp,"%s",chararr);	
		for(i=0;i<num;i++)                                                               
			fscanf(fp,"%lg",&arr[n][i]);                                                    
		//for(i=0;i<num;i++)                                                               
		//	printf("%lg ",arr[n][i]); printf("\n"); 
		//printf("\n");   		                                          
		//if(arr[n][5] == 0 && (arr[n][2]!=0 && arr[n][3]!=0) && arr[n][6] <= 1.2) tmp++;
		if(arr[n][7] == 0 && (arr[n][4]!=0 && arr[n][5]!=0) && 
				(arr[n][12] > -99 && arr[n][12] < 99)) tmp++;
		//if(arr[n][7] == 0 && arr[n][8] <= 1.2 && arr[n][12] > -99) tmp++;
		n ++;		                                                                  
	}                                                                  
	fclose(fp);                    
	*nfit = tmp;

	printf("number of good data is %d \n",tmp);
	Lens = mymalloc(sizeof(LENS)*tmp);
	good_data(arr,nobj,tmp,Lens,zmax,xmax,ymax);
	return Lens;
}

void good_data(double **arr,int nobj,int nfit,LENS *Lens,double *z,double xma[2],double yma[2])
{
	int i,tmp = 0;
	float ymax = -10,xmax = 0,zmax = 0,xmin = 1000,ymin = 1000;
	for(i=0;i<nobj;i++)
		//if(arr[i][5] == 0 && (arr[i][2]!=0 && arr[i][3]!=0) && arr[i][6] <= 1.2)
		if(arr[i][7] == 0 && (arr[i][4]!=0 && arr[i][5]!=0) &&
				(arr[i][12] > -99 && arr[i][12] < 99))
		//if(arr[i][7] == 0 && arr[i][8] <= 1.2 && arr[i][12] > -99)
		{
			Lens[tmp].pz = arr[i][14]; 
            Lens[tmp].e1 = arr[i][4];  
			Lens[tmp].e2 = arr[i][5]-arr[i][10];
			Lens[tmp].m  = arr[i][9];
			Lens[tmp].mag = arr[i][11];  //absolute L
			//Lens[tmp].mag = arr[i][12];  //mag
			Lens[tmp].wt = arr[i][6]*0.01;
			Lens[tmp].pos[0] = -arr[i][0];
			Lens[tmp].pos[1] = arr[i][1];
			Lens[tmp].pos[2] = arr[i][8];
			
			if(xmax < arr[i][0]) xmax = arr[i][0];
			if(ymax < arr[i][1]) ymax = arr[i][1];
			if(zmax < arr[i][8]) zmax = arr[i][8];
			if(xmin > arr[i][0]) xmin = arr[i][0];
			if(ymin > arr[i][1]) ymin = arr[i][1];
						
			tmp ++;
		}
	printf("xmax = %f ,xmin = %f ,ymax = %f ,ymin = %f ,zmax = %f \n",xmax,xmin,ymax,ymin,zmax);
	*z = zmax;
	xma[1] = xmax+0.1;  xma[0] = xmin-0.1;
	yma[1] = ymax+0.1;  yma[0] = ymin-0.1;
}

int if_range(double xrange[2][2],double tmp[2])
{
	if(-tmp[0]>xrange[0][0] && -tmp[0]<xrange[0][1]
			&& tmp[1]>xrange[1][0] && tmp[1]<xrange[1][1])
		return 1;
	else return 0;
	
}



void check1d(int *arr,int n)
{
	int i;
	for(i=0;i<n;i++)
		if(arr[i] != 0) printf("use of memset is wrong!\n");
}




#undef omegal0 
#undef omegam0 
#undef H0 
#undef DH 
#undef au 
